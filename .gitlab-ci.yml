workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

default:
  image: quay.io/centos-sig-automotive/automotive-osbuild

include:
  - project: 'redhat/edge/ci-cd/pipe-x/pipelines-as-code'
    ref: gitlab-ci
    file:
      - '/.gitlab/trigger.yml'

stages:
  - pre
  - test
  - container
  - deploy
  - trigger

linter:
  image: python:latest
  before_script:
    - python3 --version; pip --version
    - python3 -m pip install --upgrade pip
    - python3 -m pip install tox
  stage: pre
  script:
    - tox -e lint

yamllint-job:
  image: python:latest
  before_script:
    - python3 --version; pip --version
    - python3 -m pip install --upgrade pip
    - python3 -m pip install tox
  stage: pre
  script:
    - tox -e yamllint

compose-test-job:
  stage: test
  script:
    - tests/test-compose tests/test-compose.json

integration-test-job:
  stage: test
  script:
    - tests/test-integration

compose-test-modified-distro:
  stage: test
  script:
    - 'tests/test-compose tests/test-compose.json distro "$(git diff --diff-filter=d --name-only ${CI_MERGE_REQUEST_DIFF_BASE_SHA} | grep ^distro/ | xargs -r basename -s .ipp.yml)"'
  rules:
    - changes:
        - distro/*.ipp.yml
  # Allow this job to fail as it's expected to fail for some cases
  # Still we want to check and see the errors
  allow_failure: true

compose-test-modified-target:
  stage: test
  script:
    - 'tests/test-compose tests/test-compose.json target "$(git diff --diff-filter=d --name-only ${CI_MERGE_REQUEST_DIFF_BASE_SHA} | grep ^targets/ | xargs -r basename -s .ipp.yml)"'
  rules:
    - changes:
        - targets/*.ipp.yml

unit-test-job:
  image: python:latest
  before_script:
    - python3 --version; pip --version
    - python3 -m pip install --upgrade pip
    - python3 -m pip install tox
  stage: test
  script:
    - tox -e test,coverage
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/report.xml
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+%)/'

build-image-x86-job:
  image: quay.io/centos-sig-automotive/automotive-osbuild
  stage: test
  script:
    - ./automotive-image-builder build --mode=image --export qcow2 examples/lowlevel.mpp.yml lowlevel.qcow2

build-package-x86-job:
  image: quay.io/centos-sig-automotive/automotive-osbuild
  stage: test
  script:
    - ./automotive-image-builder build --mode=package --export image examples/lowlevel.mpp.yml lowlevel.img

packit-srpm-build:
  image: quay.io/packit/packit
  stage: test
  script:
    - packit srpm
  artifacts:
    paths:
      - "*.src.rpm"
    expire_in: 1 week

build-simple-image-x86-job:
  image: quay.io/centos-sig-automotive/automotive-osbuild
  stage: test
  script:
    - ./automotive-image-builder build --mode=image --export image examples/complex.aib.yml example.img

build-simple-package-x86-job:
  image: quay.io/centos-sig-automotive/automotive-osbuild
  stage: test
  script:
    - ./automotive-image-builder build --mode=package --export image examples/complex.aib.yml example.img

build-simple-autosd-image-x86-job:
  image: quay.io/centos-sig-automotive/automotive-osbuild
  stage: test
  script:
    - ./automotive-image-builder build --distro autosd9 --mode=image --export image examples/complex.aib.yml example.img

build-simple-autosd-package-x86-job:
  image: quay.io/centos-sig-automotive/automotive-osbuild
  stage: test
  script:
    - ./automotive-image-builder build --distro autosd9 --mode=package --export image examples/complex.aib.yml example.img

pages:
  stage: deploy
  image: python:3.11
  before_script:
    - python3 --version; pip --version
    - python3 -m pip install --upgrade pip
    - python3 -m pip install pyyaml jsonschema json-schema-for-humans
  artifacts:
    paths:
      - public
  script:
    - mkdir -p public
    - cp docs/index.html public/
    - generate-schema-doc files/manifest_schema.yml public/simple_manifest.html
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

container-latest:
  stage: container
  image: quay.io/buildah/stable:latest
  interruptible: true
  parallel:
    matrix:
      - ARCH: [amd64, arm64]
  tags:
    - saas-linux-small-${ARCH}
  variables:
    IMAGE: quay.io/centos-sig-automotive/automotive-image-builder
    TAG: latest
  script:
    - buildah bud -f Containerfile -t "$IMAGE:$TAG-$ARCH" .
    - buildah login -u "$CONTAINER_REGISTRY_USER" -p "$CONTAINER_REGISTRY_PASSWORD" quay.io
    - buildah push "$IMAGE:$TAG-$ARCH"
    - echo "MANIFEST=$IMAGE:$TAG" > container.env
  artifacts:
    reports:
      dotenv: container.env
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"

container-latest-manifest:
  stage: deploy
  image: quay.io/buildah/stable:latest
  script:
    - buildah login -u "$CONTAINER_REGISTRY_USER" -p "$CONTAINER_REGISTRY_PASSWORD" quay.io
    - buildah manifest create $MANIFEST $MANIFEST-{amd64,arm64}
    - buildah manifest push $MANIFEST docker://$MANIFEST
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"

trigger-pipeline:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.py"
        - "**/*.yml"
        - automotive-image-builder
        - mpp/aib-osbuild-mpp
        - files/*
        - tests/*
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - !reference [.trigger-template, rules]


build_doc_demos:
  stage: test
  image: python:3.11
  before_script:
    - apt-get update
    - apt-get install -y jq less
    - mkdir -p ~/.config
    - 'echo "client:" > ~/.config/duffy'
    - 'echo "  url: https://duffy.ci.centos.org/api/v1" >> ~/.config/duffy'
    - 'echo "  auth:" >> ~/.config/duffy'
    - 'echo "    name:" $duffy_name >> ~/.config/duffy'
    - 'echo "    key:" $duffy_key >> ~/.config/duffy'
    - base64 -d $ssh_key > automotive_sig.ssh
    - chmod 600 automotive_sig.ssh
  script:
    - pip install "duffy[client]"
    - sh tests/run_aws.sh
  allow_failure: true
  artifacts:
    paths:
      - logs
    when: always
