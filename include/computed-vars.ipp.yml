version: '2'

# We have loaded the variables specified in the manifest, the defaults
# and in the per-arc/target/image-type includes. We can now do optional
# things that depend on what was set in that.

mpp-vars:
  # If no absolute size is set, compute the relative size
  varpart_size:
    mpp-eval: locals().get('varpart_size', int(int(image_size) * varpart_relative_size / 512))

  # Compute dynamic uuids if requested
  rootfs_uuid:
    mpp-eval: (rootfs_uuid if static_uuids else str(__import__('uuid').uuid4()))
  bootfs_uuid:
    mpp-eval: (bootfs_uuid if static_uuids else str(__import__('uuid').uuid4()))
  parttab_uuid:
    mpp-eval: (parttab_uuid if static_uuids else str(__import__('uuid').uuid4()))
  efipart_uuid:
    mpp-eval: (efipart_uuid if static_uuids else str(__import__('uuid').uuid4()))
  bootpart_uuid:
    mpp-eval: (bootpart_uuid if static_uuids else str(__import__('uuid').uuid4()))
  varpart_uuid:
    mpp-eval: (varpart_uuid if static_uuids else str(__import__('uuid').uuid4()))
  abootpart_uuid_a:
    mpp-eval: (abootpart_uuid_a if static_uuids else str(__import__('uuid').uuid4()))
  abootpart_uuid_b:
    mpp-eval: (abootpart_uuid_b if static_uuids else str(__import__('uuid').uuid4()))
  vbmetapart_uuid_a:
    mpp-eval: (vbmetapart_uuid_a if static_uuids else str(__import__('uuid').uuid4()))
  vbmetapart_uuid_b:
    mpp-eval: (vbmetapart_uuid_b if static_uuids else str(__import__('uuid').uuid4()))
  rootpart_uuid:
    mpp-eval: (rootpart_uuid if static_uuids else str(__import__('uuid').uuid4()))
  luks_uuid:
    mpp-eval: (luks_uuid if static_uuids else str(__import__('uuid').uuid4()))

  # Derive these from use_boot
  use_aboot:
    mpp-eval: use_boot == "aboot"
  use_grub2:
    mpp-eval: use_boot == "grub2" or use_boot == "grub2-sbl"
  use_sbl:
    mpp-eval: use_boot == "grub2-sbl"

  # Enable as needed
  use_abootpart:
    mpp-if: not "use_abootpart" in locals()
    then:
      mpp-eval: use_aboot
  use_vbmetapart:
    mpp-if: not "use_vbmetapart" in locals()
    then:
      mpp-eval: use_aboot
  use_efipart:
    mpp-if: not "use_efipart" in locals()
    then:
      mpp-eval: use_grub2
  use_bootpart:
    mpp-if: not "use_bootpart" in locals()
    then:
      mpp-eval: use_grub2
  use_sblpart:
    mpp-if: not "use_sblpart" in locals()
    then:
      mpp-eval: use_sbl

  image_repos:
    mpp-join:
      - mpp-eval: distro_repos
      - mpp-eval: target_repos
  build_repos:
    mpp-join:
      - mpp-eval: distro_repos
      - mpp-eval: target_build_repos
  image_devel_repos:
    mpp-join:
      - mpp-eval: distro_devel_repos
  image_debug_repos:
    mpp-join:
      - mpp-eval: distro_debug_repos

  # Backwards compatibility by checking if the deprecated kernel_rpm variable is set
  kernel_core_package:
    mpp-if: locals().get('kernel_rpm')
    then:
      mpp-eval: kernel_rpm + "-core"
    else:
      mpp-eval: kernel_package + "-core"
  kernel_devel_rpm:
    mpp-if: locals().get('kernel_rpm')
    then:
      mpp-eval: kernel_rpm + "-devel"
    else:
      mpp-eval: kernel_package + "-devel" if not kernel_version else kernel_package + "-devel-" + kernel_version
  kernel_rpm:
    mpp-if: locals().get('kernel_rpm')
    then:
      mpp-eval: kernel_rpm
    else:
      mpp-eval: kernel_package if not kernel_version else kernel_package + "-" + kernel_version
  # Sign the modules by default only for kernel-automotive in image mode.
  # Honor sign_kernel_modules override in all other cases.
  sign_kernel_modules:
    mpp-if: kernel_package.startswith('kernel-automotive')
    then:
      mpp-eval: locals().get('sign_kernel_modules', image_mode == 'image')
    else:
      mpp-eval: locals().get('sign_kernel_modules', False)
  use_kernel_debug_package:
    mpp-if: "'debug' in locals().get('kernel_package')"
    then: true
  systemd_timeout:
    mpp-eval: "'90s' if use_debug or use_kernel_debug_package else systemd_timeout"
  # use_bluechi is a backwards compat option that enables both use_bluechi_agent and use_bluechi_controller
  use_bluechi_agent:
    mpp-eval: use_bluechi_agent or locals().get('use_bluechi')
  use_bluechi_controller:
    mpp-eval: use_bluechi_controller or locals().get('use_bluechi')
  use_ostree:
    mpp-eval: use_ostree or image_mode == 'image'
  has_partition_table:
    mpp-eval: any(ext in exports for ext in ['image', 'simg', 'qcow2'])
  use_separate_var:
    mpp-eval: has_partition_table and use_separate_var
  _dash_escape: "\\x2d"
  denylist_modules:
    mpp-join:
      - mpp-eval: denylist_modules
      - mpp-if: use_fusa
        then:
          mpp-eval: target_fusa_denylist_modules
  dracut_modules:
    mpp-join:
      - mpp-if: is_autoinit_supported and use_autoinit
        then:
          - systemd-initrd-automotive
          - mpp-if: use_debug or use_kernel_debug_package
            then: systemd-journald
  dracut_add_drivers:
    mpp-join:
      - mpp-eval: dracut_add_drivers
      - mpp-if: use_composefs
        then:
          - erofs
          - overlay
          - loop
  dracut_omit_drivers:
    mpp-join:
      - mpp-eval: dracut_omit_drivers
      - mpp-eval: denylist_modules
  dracut_omit_modules:
    mpp-join:
      - mpp-eval: dracut_omit_modules
      - - mpp-if: not use_luks
          then: dm
  load_modules:
    mpp-join:
      - mpp-eval: load_modules
      - - mpp-if: use_static_ip and static_ip_module
          then: $static_ip_module
  auto_modules_conf:
    mpp-format-string: |
      {newline.join(load_modules)}

  selinux_booleans:
    mpp-join:
      - mpp-eval: selinux_booleans
      - - mpp-if: selinux_secure_mode
          then: secure_mode_policyload=true
  # This file only exists to satisfy the upstream tuned realtime profile,
  # which fails to apply if these values are undefined.
  # Changing this will not reflect in boot-time cmdline options for tuned,
  # the tuned cmdline options have been separately ported (see kernel_opts).
  realtime_variables_conf:
    mpp-format-string: |
      isolated_cores=2-N
      isolate_managed_irq=Y
  extra_image_copy:
    mpp-join:
      - mpp-eval: extra_image_copy
      - mpp-eval: locals().get('extra_image_copy_' + image_mode, [])
      - - mpp-if: use_ostree and use_separate_var
          then:
            from: input://tree/ostree/deploy/$osname/var/
            to: mount://root/var/
  dracut_install:
    mpp-join:
      - mpp-eval: dracut_install
      - mpp-if: use_luks and luks_auto_unlock
        then:
          - /usr/.auto-unlock-key
  kernel_opts:
    mpp-join:
      - - rw
        - mpp-if: use_ostree and use_aboot
          then: ostree=true
        - loglevel=$kernel_loglevel
        - mpp-if: use_efi_runtime
          then: efi=runtime
      - mpp-eval: kernel_opts
      - mpp-eval: simple_kernel_opts
      - mpp-eval: extra_kernel_opts
      - mpp-if: use_luks
        then:
          - rd.luks.uuid=$luks_uuid
          - rd.luks.options=discard
          - mpp-if: luks_auto_unlock
            then: rd.luks.key=$luks_uuid=/usr/.auto-unlock-key
      - mpp-if: consoles
        then:
          mpp-eval: "list(map(lambda c: 'console=' + c, consoles.split()))"
      - mpp-if: use_debug or use_kernel_debug_package
        then:
          - ignore_loglevel
          - earlycon
          - schedstats=enable
          # Configure the DMA unmap operations to invalidate IOMMU hardware TLBs synchronously.
          # This can catch some issues, however there is a performance penalty associated with
          # this option, so only enable this for debug builds.
          - iommu.strict=1
      - mpp-if: is_autoinit_supported and use_autoinit_root
        then:
          - mount-sysroot.root=$autoinit_root
          - mount-sysroot.rw
          - mpp-if: use_debug or use_kernel_debug_package
            then: mount-sysroot.debug
      - mpp-if: use_module_sig_enforce
        then:
          # Only allow modules with a valid signature to be loaded by the kernel.
          # https://www.kernel.org/doc/html/latest/admin-guide/module-signing.html#non-valid-signatures-and-unsigned-modules
          - module.sig_enforce=1
      # tuned currently relies on grub to add the boot time required parameters for realtime.
      # We replicate these parameters here as some images do not have grub.
      # There is currently a feature request upstream, this can be removed once tuned no longer requires grub.
      # Reference complete cmdline from tuned realtime profile:
      #  skew_tick=1 tsc=reliable rcupdate.rcu_normal_after_boot=1 isolcpus=${managed_irq}${isolated_cores} intel_pstate=disable nosoftlockup
      # tsc=reliable is intentionally ommitted as it is only applicable to x86_64 (not the main target of this feature as of now)
      # intel_pstate=disable is intentionally ommitted as it is only applicable to x86_64 (not the main target of this feature as of now)
      # rcupdate.rcu_normal_after_boot is intentionally ommitted as it negatively impacts boot time and is already set separately below
      - mpp-if: use_tuned_realtime
        then:
          - skew_tick=1
          - nosoftlockup
          - isolcpus=managed_irq,domain,$tuned_realtime_isolcpus
      - - systemd.show_status=auto
        # Staggered spin-up
        - libahci.ignore_sss=1
        # Enabling these slub_debug options to address a specific safety concern related to heap memory
        # integrity that only be achieved by setting the SLUB allocator to perform consistency checks.
        #   F = Sanity checks on
        #   P = Poisoning (object and padding)
        #   Z = Add guard areas (red zones) before and after each heap object
        # Note that enabling slub_debug will trigger the following warning on
        # boot up:
        # https://gitlab.com/redhat/centos-stream/src/kernel/centos-stream-9/-/blob/main/lib/vsprintf.c?ref_type=heads#L2230
        - slub_debug=FPZ
        - fsck.mode=skip
        # Disable rcu_normal_after_boot (because we want to delay the setting of rcu_normal to rcu-normal.service)
        - rcupdate.rcu_normal_after_boot=0
        # Enable rcu_expedited for faster boot (will be disabled by rcu-normal.service)
        - rcupdate.rcu_expedited=1
        # Disable all cgroups v1 interfaces
        - cgroup_no_v1=named,all
  # For some reasons we need to create the /etc/kernel/cmdline before installing
  # packages or the dracut image doesn't pick it up. We insert this automatically
  # first in rootfs to avoid users having to care about this weirdness.
  kernel_cmdline_stage:
    type: org.osbuild.kernel-cmdline
    options:
      root_fs_uuid:
        mpp-if: not use_abl
        then:
          mpp-eval: rootfs_uuid
      kernel_opts:
        mpp-eval: ''' '' .join(kernel_opts)'
  # Initialize /etc/passwd and /etc/group either with the static base
  # content (to avoid dynamic uid allocations changing between versions)
  # or from the copy in QM (to merge dynamic uid allocations)
  init_passwd_stage:
    type: org.osbuild.copy
    inputs:
      etc-tree:
        type: org.osbuild.tree
        origin: org.osbuild.pipeline
        references:
          - mpp-if: use_qm
            then:
              mpp-format-string: "name:{qm_pipeline}"
            else: "name:data"
    options:
      paths:
        - from: input://etc-tree/etc/passwd
          to: tree:///etc/passwd
        - from: input://etc-tree/etc/group
          to: tree:///etc/group

  bluechi_controller_allowed_node_names:
    mpp-if: not bluechi_controller_allowed_node_names
    then:
      - $bluechi_nodename
      - mpp-if: use_qm
        then: qm.$bluechi_nodename
  rootpart_label:
    mpp-eval: aboot_partlabel if use_aboot else "root"
  autoinit_root:
    mpp-eval: locals().get("autoinit_root", f"PARTLABEL={rootpart_label}")
  qm_importfile:
    mpp-if: use_qm
    then: "qm"
    else: "empty"
  image_enabled_services:
    mpp-join:
      - mpp-eval: image_enabled_services
      - - mpp-if: tmp_is_tmpfs
          then: tmp.mount
        - mpp-if: use_bluechi_agent
          then: bluechi-agent.service
        - mpp-if: use_bluechi_controller
          then: bluechi-controller.service
        - rcu-normal.service
        - mpp-if: use_efipart
          then: boot-efi.mount
        - mpp-if: use_bootpart
          then: boot.mount
        - mpp-if: use_separate_var
          then: var.mount
        - mpp-if: use_static_ip
          then: main-nmstate.service
        - mpp-if: use_tuned_realtime
          then: tuned.service
        - mpp-if: selinux_booleans
          then: selinux-bools.service
  image_extra_stages:
    mpp-join:
      - mpp-eval: target_extra_image_stages
      - - type: org.osbuild.locale
          options:
            language:
              mpp-eval: locale
        - type: org.osbuild.hostname
          options:
            hostname:
              mpp-eval: hostname
        - type: org.osbuild.timezone
          options:
            zone:
              mpp-eval: timezone
        - mpp-if: selinux_booleans
          then:
            type: org.osbuild.systemd.unit.create
            options:
              filename: selinux-bools.service
              unit-type: system
              unit-path: usr
              config:
                Unit:
                  Description: Enable selinux booleans
                  DefaultDependencies: false
                  Before:
                    - basic.target
                  After:
                    - sysinit.target
                Service:
                  Type: "oneshot"
                  RemainAfterExit: true
                  ExecStart:
                    - mpp-format-string: setsebool {' '.join(selinux_booleans)}
                Install:
                  WantedBy:
                    - multi-user.target
        - type: org.osbuild.systemd
          options:
            disabled_services:
              mpp-eval: image_disabled_services
            enabled_services:
              mpp-eval: image_enabled_services
            masked_services:
              mpp-eval: image_masked_services
            masked_generators:
              mpp-eval: image_masked_generators
        - type: org.osbuild.systemd-journald
          options:
            filename:
              10-automotive.conf
            config:
              Journal:
                Storage:
                  mpp-eval: journal_storage
        - type: org.osbuild.containers.storage.conf
          options:
            filename: $containers_configdir/storage.conf
            config:
              storage:
                transient_store:
                  mpp-eval: containers_transient_store
                options:
                  additionalimagestores:
                    - mpp-if: use_containers_extra_store
                      then:
                        mpp-eval: containers_extra_store
        - mpp-if: use_qm
          then:
            type: org.osbuild.mkdir
            options:
              paths:
                - path: /usr/lib/qm/rootfs
                  parents: true
                  exist_ok: true
                - path: /etc/qm/
                  parents: true
                  exist_ok: true
                - path: /var/qm/
                  parents: true
        - mpp-if: use_qm
          then:
            type: org.osbuild.copy
            inputs:
              tree:
                type: org.osbuild.tree
                origin: org.osbuild.pipeline
                references:
                  - mpp-format-string: name:{qm_pipeline}
            options:
              paths:
                - from: input://tree/
                  to: tree:///usr/lib/qm/rootfs/
                - from: input://tree/etc/
                  to: tree:///etc/qm/
                - from: input://tree/var/
                  to: tree:///var/qm/
        - mpp-if: denylist_modules
          then:
            type: org.osbuild.modprobe
            options:
              filename: automotive.conf
              commands:
                mpp-eval: "[{'command': 'blacklist', 'modulename': m} for m in denylist_modules]"
        - mpp-if: sign_kernel_modules
          then:
            type: org.osbuild-auto.kernel.sign-modules
            inputs:
              tree:
                type: org.osbuild.tree
                origin: org.osbuild.pipeline
                references:
                  - name:kernel-keys
            options:
              key: input://tree/kernel.key
              x509: input://tree/kernel.x509
        - mpp-if: sign_kernel_modules
          then:
            type: org.osbuild-auto.kernel.add-cert
            inputs:
              tree:
                type: org.osbuild.tree
                origin: org.osbuild.pipeline
                references:
                  - name:kernel-keys
            options:
              x509: input://tree/kernel.x509
        - mpp-if: use_tuned_realtime
          then:
            type: org.osbuild.tuned
            options:
              profiles:
                - realtime

  # Extra directories that will be created in the image, list amended by moode-*.ipp
  extra_tree_dirs:
    - path: /etc/containers
      parents: true
      exist_ok: true
    - path: /usr/share/containers
      parents: true
      exist_ok: true
    - path: /usr/lib/systemd/system.conf.d
      parents: true
      exist_ok: true
    - path: /usr/lib/systemd/coredump.conf.d
      parents: true
      exist_ok: true
    - mpp-if: use_qm
      then:
        path: /usr/share/containers/systemd/qm.container.d
        parents: true
        exist_ok: true
  # Extra content that will be copied from from extra-tree to the image, list amended by moode-*.ipp
  extra_tree_content:
    - from: input://extra-tree/selinux.conf
      to: tree:///etc/selinux/config
    - from: input://extra-tree/systemd-system.conf
      to: tree:///usr/lib/systemd/system.conf.d/10-automotive.conf
    - from: input://extra-tree/coredump.conf
      to: tree:///usr/lib/systemd/coredump.conf.d/10-automotive.conf
    - from: input://extra-tree/rcu-normal.service
      to: tree:///usr/lib/systemd/system/rcu-normal.service
    - mpp-if: use_luks and luks_auto_unlock
      then:
        from: input://extra-tree/luks-key
        to: tree:///usr/.auto-unlock-key
    - from: input://extra-tree/containers.conf
      to: tree://$containers_configdir/containers.conf
    - mpp-if: use_ostree
      then:
        from: input://extra-tree/ostree_prepare_root.conf
        to: tree:///usr/lib/ostree/prepare-root.conf
    - from: input://extra-tree/build-info
      to: tree:///etc/build-info
    - mpp-if: load_modules
      then:
        from: input://extra-tree/auto-modules.conf
        to: tree:///usr/lib/modules-load.d/auto-modules.conf
    - from: input://extra-tree/subuid
      to: tree:///etc/subuid
    - from: input://extra-tree/subgid
      to: tree:///etc/subgid
    - mpp-if: use_bluechi_controller
      then:
        from: input://extra-tree/bluechi.conf
        to: tree:///etc/bluechi/controller.conf
    - mpp-if: use_bluechi_agent
      then:
        from: input://extra-tree/bluechi_agent.conf
        to: tree:///etc/bluechi/agent.conf
    - mpp-if: use_static_ip
      then:
        from: input://extra-tree/main.nmstate
        to: tree:///etc/main.nmstate
    - mpp-if: use_static_ip
      then:
        from: input://extra-tree/main-nmstate.service
        to: tree:///usr/lib/systemd/system/main-nmstate.service
    - mpp-if: use_tuned_realtime
      then:
        from: input://extra-tree/realtime-variables.conf
        to: tree:///etc/tuned/realtime-variables.conf
    - mpp-if: use_bootpart
      then:
        from: input://extra-tree/boot.mount
        to: tree:////usr/lib/systemd/system/boot.mount
    - mpp-if: use_efipart
      then:
        from: input://extra-tree/boot-efi.mount
        to: tree:////usr/lib/systemd/system/boot-efi.mount
    - mpp-if: use_separate_var
      then:
        from: input://extra-tree/var.mount
        to: tree:////usr/lib/systemd/system/var.mount
    - mpp-if: use_qm
      then:
        from: input://extra-tree/qm-autosd.conf
        to: tree:////usr/share/containers/systemd/qm.container.d/10-autosd.conf

  build_rpms:
    mpp-join:
      - mpp-eval: build_rpms
      - mpp-eval: distro_build_rpms
      - mpp-eval: arch_build_rpms
      - mpp-eval: target_build_rpms
      - - mpp-if: use_luks
          then: cryptsetup
        - mpp-if: use_luks
          then: lvm2
        - mpp-if: use_aboot
          then: aboot-update
        - mpp-if: use_aboot
          then: aboot-deploy
        - mpp-if: use_composefs_signed
          then: openssl
      - - mpp-if: sign_kernel_modules
          then: $kernel_devel_rpm

  ostree_mode_rpms:
    - nss-altfiles
    - greenboot
    - mpp-if: not use_aboot
      then: greenboot-grub2
    - greenboot-reboot
    - greenboot-status
    - mpp-if: not use_aboot
      then: greenboot-rpm-ostree-grub2
    - skopeo  # Needed for upgrading from an OCI remove image

  package_mode_rpms:
    - shim

  image_rpms:
    mpp-join:
      - mpp-eval: base_rpms
      - mpp-eval: arch_rpms
      - mpp-eval: target_rpms
      - mpp-if: use_ostree
        then:
          mpp-eval: ostree_mode_rpms
        else:
          mpp-eval: package_mode_rpms
      - mpp-if: is_autoinit_supported and use_autoinit
        then:
          - util-linux-automotive
          - dracut-automotive
      - - $release_rpm
        - $kernel_rpm
        - mpp-if: linux_firmware_rpm
          then: $linux_firmware_rpm
        - mpp-if: use_luks
          then: lvm2
        - mpp-if: use_aboot
          then: aboot-deploy
        - mpp-if: use_tuned_realtime
          then: tuned
        - mpp-if: use_tuned_realtime
          then: tuned-profiles-realtime
        - mpp-if: use_static_ip
          then: nmstate
        - mpp-if: not use_static_ip
          then: NetworkManager
        - mpp-if: use_bluechi_agent
          then: bluechi-agent
        - mpp-if: use_bluechi_controller
          then: bluechi-controller
        - mpp-if: use_qm
          then: qm

  _debug_output:
    mpp-eval: "locals().get('print_variables') and print( __import__('json').dumps({k: v for k, v in locals().items() if not k.startswith('_')}, default=lambda o: '<not serializable>', sort_keys=True, indent=2))"

  _debug_check_arch:
    mpp-if: "target_supported_arches and arch not in target_supported_arches"
    then:
      mpp-eval: "print(f'target {target} not supported on arch {arch}') or  __import__('sys').exit(1)"

pipelines: []
