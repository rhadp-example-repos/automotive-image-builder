version: '2'

pipelines:
  - name: image-tree
    build: name:build
    stages:
      mpp-join:
        - - type: org.osbuild.copy
            inputs:
              tree:
                type: org.osbuild.tree
                origin: org.osbuild.pipeline
                references:
                  - name:rootfs
            options:
              paths:
                - from: input://tree/
                  to: tree:///
          - type: org.osbuild.mkdir
            options:
              paths:
                mpp-eval: extra_tree_dirs
          - type: org.osbuild.copy
            inputs:
              extra-tree:
                type: org.osbuild.tree
                origin: org.osbuild.pipeline
                references:
                  - name:extra-tree-content
            options:
              paths:
                mpp-eval: extra_tree_content
          - type: org.osbuild.users
            options:
              users:
                root:
                  password:
                    mpp-if: root_password
                    then:
                      mpp-eval: root_password
                  key:
                    mpp-if: root_ssh_key
                    then:
                      mpp-eval: root_ssh_key
          - type: org.osbuild.systemd
            options:
              enabled_services:
                - mpp-if: "containers_transient_store and 'podman' in rpms['rootfs']"
                  then: podman-clean-transient.service
        - mpp-eval: image_extra_stages
        - - type: org.osbuild.dracut.conf
            options:
              filename: 90-image.conf
              config:
                early_microcode: false
                reproducible: true
                compress:
                  mpp-if: dracut_compression
                  then:
                    mpp-eval: dracut_compression
                dracutmodules:
                  mpp-if: dracut_modules
                  then:
                    mpp-eval: dracut_modules
                add_dracutmodules:
                  mpp-if: dracut_add_modules and not dracut_modules
                  then:
                    mpp-eval: dracut_add_modules
                omit_dracutmodules:
                  mpp-if: dracut_omit_modules and not dracut_modules
                  then:
                    mpp-eval: dracut_omit_modules
                drivers:
                  mpp-if: dracut_drivers
                  then:
                    mpp-eval: dracut_drivers
                add_drivers:
                  mpp-if: dracut_add_drivers
                  then:
                    mpp-eval: dracut_add_drivers
                omit_drivers:
                  mpp-if: dracut_omit_drivers
                  then:
                    mpp-eval: dracut_omit_drivers
                force_drivers:
                  mpp-if: dracut_force_drivers and not dracut_drivers
                  then:
                    mpp-eval: dracut_force_drivers
                filesystems:
                  mpp-if: dracut_filesystems
                  then:
                    mpp-eval: dracut_filesystems
                install_items:
                  mpp-if: dracut_install
                  then:
                    mpp-eval: dracut_install
          - type: org.osbuild.dracut
            options:
              mpp-if: use_kernel_debug_package
              then:
                kernel:
                  - mpp-eval: rpms['rootfs'][kernel_core_package].evra+"+debug"
              else:
                kernel:
                  - mpp-eval: rpms['rootfs'][kernel_core_package].evra
          - mpp-if: use_grub2
            then:
              type: org.osbuild.grub2
              options:
                root_fs_uuid:
                  mpp-eval: rootfs_uuid
                boot_fs_uuid:
                  mpp-eval: bootfs_uuid
                kernel_opts:
                  mpp-eval: ''' '' .join(kernel_opts)'
                uefi:
                  vendor:
                    mpp-eval: uefi_vendor
                  unified: true
                legacy: false
                write_defaults: false
                greenboot: true
        - mpp-if: use_aboot
          then:
            - type: org.osbuild-auto.aboot.conf
              options:
                pagesize:
                  mpp-if: "locals().get('aboot_pagesize',) != None"
                  then:
                    mpp-format-string: "{aboot_pagesize}"
                kernel_offset:
                  mpp-if: "locals().get('aboot_kernel_offset') != None"
                  then:
                    mpp-format-string: "{aboot_kernel_offset}"
                partition_a:
                  mpp-if: "locals().get('aboot_partition_a') != None"
                  then:
                    mpp-format-string: "{aboot_partition_a}"
                partition_b:
                  mpp-if: "locals().get('aboot_partition_b') != None"
                  then:
                    mpp-format-string: "{aboot_partition_b}"
                second_offset:
                  mpp-if: "locals().get('aboot_second_offset') != None"
                  then:
                    mpp-format-string: "{aboot_second_offset}"
                tags_offset:
                  mpp-if: "locals().get('aboot_tags_offset') != None"
                  then:
                    mpp-format-string: "{aboot_tags_offset}"
                base:
                  mpp-if: "locals().get('aboot_base') != None"
                  then:
                    mpp-format-string: "{aboot_base}"
                dtb_file:
                  mpp-if: "locals().get('aboot_dtb_file') != None"
                  then:
                    mpp-format-string: "{aboot_dtb_file}"
                compress_kernel:
                  mpp-if: "aboot_compress_kernel != None"
                  then:
                    mpp-eval: aboot_compress_kernel
                ramdisk_offset:
                  mpp-if: "locals().get('aboot_ramdisk_offset') != None"
                  then:
                    mpp-format-string: "{aboot_ramdisk_offset}"
            - type: org.osbuild-auto.aboot.update
              options:
                mpp-if: use_kernel_debug_package
                then:
                  kernel:
                    mpp-eval: rpms['rootfs'][kernel_core_package].evra+'+debug'
                else:
                  kernel:
                    mpp-eval: rpms['rootfs'][kernel_core_package].evra
            - type: org.osbuild.copy
              inputs:
                inlinefile:
                  type: org.osbuild.files
                  origin: org.osbuild.source
                  mpp-embed:
                    id: kernel-install.conf
                    text: layout=aboot
              options:
                paths:
                  - from:
                      mpp-format-string: input://inlinefile/{embedded['kernel-install.conf']}
                    to: tree:///usr/lib/kernel/install.conf
        - - type: org.osbuild.fix-bls
            options:
              prefix: /
          - type: org.osbuild.selinux
            options:
              file_contexts:
                mpp-format-string: etc/selinux/{selinux_policy}/contexts/files/file_contexts
