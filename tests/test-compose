#!/usr/bin/python3

import sys
import os
import subprocess
import json
import shlex

tests = sys.argv[1]

tests_dir = os.path.dirname(os.path.realpath(tests))

with open(tests) as f:
    tests = json.load(f)


def convert_elem(elem):
    res = elem
    if isinstance(elem, str):
        res = {"value": elem}
    return res


def convert_list(elem):
    res = []
    if isinstance(elem, list):
        for e in elem:
            res.append(convert_elem(e))
    else:
        res.append(convert_elem(elem))
    return res


default_manifest = tests["default-manifest"]
arches = convert_list(tests["arch"])
distros = convert_list(tests["distro"])
targets = convert_list(tests["target"])
# override distros and targets
if len(sys.argv) > 3:
    if sys.argv[2] == "distro":
        distros = convert_list(sys.argv[3].split())
        targets = [convert_elem("qemu")]
        arches = [convert_elem("aarch64")]
    elif sys.argv[2] == "target":
        targets = convert_list(sys.argv[3].split())
        distros = [convert_elem("cs9")]
        arches = [convert_elem("aarch64")]
    else:
        print(
            f"Unrecognized mode: {sys.argv[2]}. Please use one of ['distro', 'target']"
        )
        sys.exit(1)
modes = convert_list(tests["mode"])
defines = convert_list(tests["defines"])


def collect_args(elms, arg):
    res = []
    for elm in elms:
        if arg in elm:
            v = elm[arg]
            if v not in res:
                res.append(v)
    return res


def collect_list_args(elms, arg):
    res = []
    for elm in elms:
        if arg in elm:
            v = elm[arg]
            if v not in res:
                res.extend(v)
    return res


def filter_by_arch(elms, arch):
    arch_is = collect_args(elms, "arch-is")
    if arch_is:
        return arch not in arch_is
    return False


def filter_by_distro(elms, distro):
    distro_is = collect_list_args(elms, "distro-is")
    if distro_is and distro not in distro_is:
        return True
    distro_is_not = collect_list_args(elms, "distro-is-not")
    if distro_is_not and distro in distro_is_not:
        return True
    return False


to_run = []
for distro in distros:
    for arch in arches:
        for target in targets:
            for mode in modes:
                for define in defines:
                    elms = [arch, target, mode, define]
                    if filter_by_arch(elms, arch["value"]):
                        continue
                    if filter_by_distro(elms, distro["value"]):
                        continue

                    args = [
                        "--distro",
                        distro["value"],
                        "--arch",
                        arch["value"],
                        "--target",
                        target["value"],
                        "--mode",
                        mode["value"],
                    ]
                    if define["value"]:
                        args += ["--define", define["value"]]

                    # Make json reproducible
                    args += [
                        "--define",
                        "reproducible_image=true",
                    ]

                    manifests = collect_args(elms, "manifest")
                    if manifests:
                        for m in manifests:
                            to_run.append(args + [os.path.join(tests_dir, m)])
                    else:
                        to_run.append(
                            args + [os.path.join(tests_dir, default_manifest)]
                        )

os.makedirs(".test", exist_ok=True)

for i, args in enumerate(to_run):
    file = f".test/test-{i}.json"
    cmdline = ["./automotive-image-builder", "compose"]
    cmdline += args
    cmdline += [file]

    print("Running: " + shlex.join(cmdline))
    try:
        subprocess.run(cmdline, check=True)
    except subprocess.CalledProcessError:
        print("*** Failed to compose, exiting ***")
        sys.exit(1)  # cmd will have printed the error

    with open(file) as f:
        try:
            manifest_data = json.load(f)
        except json.decoder.JSONDecodeError as e:
            print(f"Invalid generated json manifest  '{file}': " + str(e))
            print("*** Failed to validate, exiting ***")
            sys.exit(1)

    cmdline = ["osbuild", "--inspect", file]
    r = subprocess.run(cmdline, capture_output=True)
    if r.returncode != 0:
        stdout = r.stdout.decode("utf-8")
        stderr = r.stderr.decode("utf-8")
        if stderr:
            print(stderr)
        res = json.loads(stdout)
        print(res["title"])
        for e in res["errors"]:
            print(e["message"], " at ", e["path"])
        print("*** Failed to validate, exiting ***")
        sys.exit(1)  # cmd will have printed the error
